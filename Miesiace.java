/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package uniwersalnykalendarz;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author kayne
 */
public class Miesiace extends javax.swing.JPanel {

    private List<JPanel> listaPaneli = new ArrayList<>();
    private List<JLabel> listaLabeliMiesiecy = new ArrayList<>();
    private GregorianCalendar kalendarz;
    private String[] monthOfTheYear = new String[]{"Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"};
    String[] daysOfTheWeek = new String[]{"", "Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"};
    String[] daysOfTheWeekShort = new String[]{"Pon", "Wt", "Śr", "Czw", "Pią", "Sob", "Nie"};
    Kalendarz rodzic;

    /**
     * Creates new form Miesiace
     */
    public Miesiace() {
        initComponents();
        setLayout(new GridLayout(4, 3));
        for (int row = 0; row < 12; row++) {
            //JPanel panel = new JPanel(new GridLayout(0, 7));
            JPanel panel = new JPanel(new BorderLayout());
            JLabel cos = new JLabel();
            final int mies = row;
            cos.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    kalendarz.set(kalendarz.get(GregorianCalendar.YEAR), mies, 1);
                    rodzic.getScrollBar2().setValue(mies);
                    rodzic.zmieńDatę();
                }
                
                @Override
                public void mousePressed(MouseEvent e) {
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }
            });
            listaLabeliMiesiecy.add(cos);
            panel.add(cos, BorderLayout.NORTH);
            JPanel panel2 = new JPanel(new GridLayout(0, 7));
            panel.add(panel2, BorderLayout.CENTER);
            listaPaneli.add(panel2);
            panel.setBorder(BorderFactory.createLineBorder(Color.black));
            add(panel);
        }
    }
    
    public void setRodzic(Kalendarz parent) {
        rodzic = parent;
    }

    public void setKalendarz(GregorianCalendar kal) {
        kalendarz = kal;
    }

    public void rysujMiesiące() {
        for (int i = 0; i < 12; i++) {
            rysujMiesiąc(listaPaneli.get(i), i);
        }
    }

    public void usunPanele() {
        for (int i = 0; i < 12; i++) {
            listaPaneli.get(i).removeAll();
        }
    }

    private void rysujMiesiąc(JPanel panel, int miesiąc) {
        kalendarz.set(kalendarz.get(GregorianCalendar.YEAR), miesiąc, 1);
        listaLabeliMiesiecy.get(miesiąc).setText(monthOfTheYear[miesiąc]);
        int startowyDzień = kalendarz.get(Calendar.DAY_OF_WEEK) - 1;

        if (startowyDzień == 0) {
            startowyDzień = 7;
        }

        for (int i = 0; i < 7; i++) {
            JLabel etykieta = new JLabel(daysOfTheWeekShort[i]);
            panel.add(etykieta);
        }

        for (int i = 1; i < startowyDzień; i++) {
            JLabel etykieta = new JLabel("");
            panel.add(etykieta);
        }

        for (int i = 1; i <= daysInMonth(kalendarz); i++) {
            if (kalendarz.get(GregorianCalendar.YEAR) == 1582 && miesiąc == 9 && i >= 5 && i <= 14) {
                continue;
            }
            JLabel etykieta;


            etykieta = new JLabel(String.valueOf(i));


            kalendarz.set(kalendarz.get(GregorianCalendar.YEAR), miesiąc, i);
            if (kalendarz.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
                etykieta.setForeground(Color.RED);
            }
            panel.add(etykieta);
        }
    }

    public static int daysInMonth(GregorianCalendar c) {
        final int[] daysInMonths = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        daysInMonths[1] += c.isLeapYear(c.get(GregorianCalendar.YEAR)) ? 1 : 0;
        return daysInMonths[c.get(GregorianCalendar.MONTH)];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(0, 500));
        setLayout(new java.awt.GridLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
